import asyncio
import yaml
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_agentchat.agents import AssistantAgent, CodeExecutorAgent
from autogen_ext.code_executors.local import LocalCommandLineCodeExecutor
from autogen_agentchat.teams import SelectorGroupChat
from autogen_agentchat.ui import Console
from autogen_agentchat.conditions import TextMentionTermination

with open("../.yaml", "r") as file:
    config = yaml.safe_load(file)
model_client = OpenAIChatCompletionClient(**config["model_config"])
qwen_clinet = OpenAIChatCompletionClient(**config["qwen_config"])
gemma_clinet = OpenAIChatCompletionClient(**config["gemma_config"])

code_generator = AssistantAgent(
    name="code_generator",
    model_client=qwen_clinet,
    system_message="""
    You are a Code Generator. Your goal is to generate code based on the user's task. 
    No user input needed. 
    The code should strictly follow one of these formats:

    - **Python Code:**  
      ```python
      print("Hello World")
      ```

    - **Shell Script:**  
      ```sh
      echo "Hello World"
      ```

    Always generate code in a structured and executable format without additional text. 
    Create a filw with the filename "code.py" or "code.sh".
    """,
    description="Generates structured and executable code in Python or Shell format."
)

Code_executor = CodeExecutorAgent(
    name="Coder_executor",
    code_executor=LocalCommandLineCodeExecutor(work_dir="./GenCodes"),
)

validator = AssistantAgent(
    name="validator",
    model_client=qwen_clinet,
    system_message="""
    You are a Validator. Your goal is to validate the code generated by the Code Generator and the output by Code Executor. 
    If changes needed, ask the Code Generator to make the changes. 
    If the code is correct and the output is correct, end the task with "APPROVE" or "TERMINATE".
    """,
    description="Validates structured and executable code in Python or Shell format."
)

team = SelectorGroupChat([code_generator, Code_executor, validator], termination_condition=TextMentionTermination("APPROVE")|TextMentionTermination("TERMINATE"), model_client=model_client)

asyncio.run(Console(team.run_stream(task="Write a py script to create a class for a Employee.")))

